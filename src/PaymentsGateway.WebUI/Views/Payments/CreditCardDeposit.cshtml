@model dynamic

@{
    ViewBag.Title = "CcDeposit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<div>
    <h1>Have some fun by paying us with your: </h1>
    <div class="container-fluid row bg-orange bg-trasparent">
        <h2 class="col-md-3">Credit Card</h2>

        <div class="col-md-9">
            <div class="row">
                <div class="col-md-9 form-group">
                    <select data-bind="options:availableCreditCards, optionsText:'last4', value:creditCard" class="form-control"></select>
                </div>
                <div class="col-md-6 form-group">
                    <input type="text" data-bind="value:nameOnCard" class="form-control" placeholder="Name On The Card" disabled="disabled" />
                </div>
                <div class="col-md-6 form-group">
                    <input type="text" data-bind="value: expirationDate" class="form-control" placeholder="Expiration Date" disabled="disabled" />
                </div>
                <div class="col-md-6 form-group">
                    <select data-bind="value: currency, options:availableCurrencies" class="form-control"></select>
                </div>
                <div class="col-md-6 form-group">
                    <input type="number" data-bind="value: amount" placeholder="Amount to deposit" class="form-control" />
                </div>
            </div>

            <div class="row">
                <div class="col-md-12 form-group">
                    <button id="deposit" data-bind="click: deposit" class="pull-right btn-danger">Deposit</button>
                </div>
            </div>
        </div>
    </div>
</div>


<script src="~/Scripts/libs/hubs.js"></script>
<script type="text/javascript">
    var paymentsDal = (function (connection) {
        const accountNumber = 123;
        var hub = connection.paymentsHub;
        //TODO: no reconnects/etc...

        $.connection.hub.start();
        // Create a callback function that the hub can call to send response from bus consumer
        hub.client.onDepositResponse = function (response) {
            console.log("response", response);
        };

        // Start the connection.
        const starting = connection.hub.start();
        return {
            starting: starting,
            payWithCreditCard: function (ccInfo) {
                const result = hub.server.ccDeposit({ AccountNumber: ccInfo.accountNumber, CardId: ccInfo.cardId, Amount: ccInfo.amount, Currency: ccInfo.currency });
                return result;
            }
        };
    })($.connection);

    var depositVM = (function (ko, $, paymentsDal) {
        var accountNumber = 123;
        const availableCreditCards = [
            { id: 100, last4: "xxxxxxxxxxxx1234", nameOnCard: "Silviu Eigel", expirationDate: new Date(2015, 11, 11) },
            { id: 101, last4: "xxxxxxxxxxxx6789", nameOnCard: "Alex Michel", expirationDate: new Date(2016, 10, 10) }
        ];
        var creditCard = ko.observable(availableCreditCards[0]);

        const availableCurrencies = ['USD', 'EUR', 'GBP'];
        var currency = ko.observable(),
            amount = ko.observable().extend({ required: true, min: 1 });

        function deposit() {
            paymentsDal.payWithCreditCard({
                accountNumber: accountNumber,
                cardId: creditCard().id,
                amount: amount(),
                currency: currency()
            }).done(function (res) {
                console.log("response ", res);
                if (res.Status !== 0) {
                    alert(`Your deposit failed because: ${res.ErrorMessage}`);
                }
                alert(`Your deposit was successful! Reference Number: ${res.TransactionId}`);
            });
        }

        return {
            availableCreditCards: availableCreditCards,
            creditCard: creditCard,
            nameOnCard: ko.computed(function () {
                return creditCard().nameOnCard;
            }),
            expirationDate: ko.computed(function () {
                return creditCard().expirationDate.toLocaleDateString();
            }),
            availableCurrencies: availableCurrencies,
            currency: currency,
            amount: amount,
            deposit: deposit
        };
    })(ko, $, paymentsDal);


    $(function () {
        ko.applyBindings(depositVM);

    });
</script>
