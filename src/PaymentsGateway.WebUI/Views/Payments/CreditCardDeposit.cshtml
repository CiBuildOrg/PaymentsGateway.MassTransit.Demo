@model dynamic

@{
    ViewBag.Title = "CcDeposit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<div>
    <h1>Have some fun by paying us with your: </h1>
    <div class="container-fluid row bg-orange bg-trasparent">
        <h2 class="col-md-3">Credit Card</h2>

        <div class="col-md-9">
            <div class="row">
                <div class="col-md-9 form-group">
                    <select data-bind="options:availableCreditCards, optionsText:'last4', value:creditCard" class="form-control"></select>
                </div>
                <div class="col-md-6 form-group">
                    <input type="text" data-bind="value:nameOnCard" class="form-control" placeholder="Name On The Card" disabled="disabled" />
                </div>
                <div class="col-md-6 form-group">
                    <input type="text" data-bind="value: expirationDate" class="form-control" placeholder="Expiration Date" disabled="disabled" />
                </div>
                <div class="col-md-6 form-group">
                    <select data-bind="value: currency, options:availableCurrencies" class="form-control"></select>
                </div>
                <div class="col-md-6 form-group">
                    <input type="number" data-bind="value: amount" placeholder="Amount to deposit" class="form-control" />
                </div>
            </div>

            <div class="row">
                <div class="col-md-12 form-group">
                    <button id="deposit" data-bind="click: deposit" class="pull-right btn-danger">Deposit</button>
                </div>
            </div>
        </div>
    </div>
</div>


<script src="~/Scripts/libs/hubs.js"></script>
<script type="text/javascript">
    var PaymentsDal = function (callback) {
        var connection = $.connection;
        var hub = connection.paymentsHub;
        connection.hub.disconnected(function() {
            setTimeout(function() {
                connection.hub.start();
            }, 1); // Restart connection after 5 seconds.
        });

        function switchAccount(accountNumber) {
            connection.hub.stop();
            connection.hub.qs = { AccountNumber: accountNumber };
            connection.hub.start();
        }

        //TODO: no reconnects/etc...

        // Create a callback function that the hub can call to send response from bus consumer
        hub.client.onDepositResponse = function (response) {
            console.trace("push notif response", response);
            callback(response);
        };

        hub.client.onMonitoringEvent = function(log) {
            console.trace(log);
        };

        // Start the connection.
        const starting = connection.hub.start();
        return {
            starting: starting,
            payWithCreditCard: function (ccInfo) {
                const result = hub.server.ccDeposit({ AccountNumber: ccInfo.accountNumber, CardId: ccInfo.cardId, Amount: ccInfo.amount, Currency: ccInfo.currency });
                return result;
            },
            switchAccount: switchAccount
        };
    };

    var depositVM = (function (ko, $) {
        var paymentsDal = PaymentsDal(handlePaymentResponse);
        const availableCreditCards = [
            { id: 100, accountNumber: 100, last4: "xxxxxxxxxxxx1234", nameOnCard: "Silviu Eigel", expirationDate: new Date(2015, 11, 11) },
            { id: 101, accountNumber: 101, last4: "xxxxxxxxxxxx6789", nameOnCard: "Alex Michel", expirationDate: new Date(2016, 10, 10) }
        ];

        var creditCard = ko.observable(availableCreditCards[0]);

        creditCard.subscribe(function(val) {
            paymentsDal.switchAccount(val.accountNumber);
        });
        
        paymentsDal.switchAccount(creditCard().accountNumber);

        const availableCurrencies = ['USD', 'EUR', 'GBP'];
        var currency = ko.observable(),
            amount = ko.observable().extend({ required: true, min: 1 });

        function deposit() {
            paymentsDal.payWithCreditCard({
                accountNumber: creditCard().accountNumber,
                cardId: creditCard().id,
                amount: amount(),
                currency: currency()
            }, handlePaymentResponse).done(handlePaymentResponse);
        }

        function handlePaymentResponse(res) {
                console.trace("response ", res);
                if (res.Status === 0) {
                console.log('Your deposit is pending! Reference Number:'+ res.TransactionId);
                } else if (res.Status === 2) {
                console.log('Your deposit is successful! Reference Number:'+res.TransactionId);
                alert('Your deposit is successful! Reference Number:'+ res.TransactionId);

                } else {
                    console.log('Your deposit failed because:' + res.ErrorMessage);
                    alert('Your deposit failed because:' +res.ErrorMessage);
                    
                }
        }

        return {
            availableCreditCards: availableCreditCards,
            creditCard: creditCard,
            nameOnCard: ko.computed(function () {
                return creditCard().nameOnCard;
            }),
            expirationDate: ko.computed(function () {
                return creditCard().expirationDate.toLocaleDateString();
            }),
            availableCurrencies: availableCurrencies,
            currency: currency,
            amount: amount,
            deposit: deposit
        };
    })(ko, $);


    $(function () {
        ko.applyBindings(depositVM);

    });
</script>
